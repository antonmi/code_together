// Generated by CoffeeScript 1.6.2
(function() {
  window.TextEditor = (function() {
    function TextEditor(ckeditor, room) {
      this.ckeditor = ckeditor;
      this.room = room;
      this.dmp = new diff_match_patch;
      this.default_text = "test";
      this.old_old_text = this.default_text;
      this.max_size = 50000;
      this.can_send = true;
      this.add_html();
      this.init_code_mirror();
      this.editor.setValue(this.default_text);
      this.config_callbacks();
    }

    TextEditor.prototype.add_html = function() {
      return $('#text_editor_div').html('<textarea rows="6" id="text_editor"></textarea>');
    };

    TextEditor.prototype.init_code_mirror = function() {
      this.editor = CodeMirror.fromTextArea(document.getElementById("text_editor"), {
        mode: "text/x-ruby",
        indentUnit: 2
      });
      return window.editor = this.editor;
    };

    TextEditor.prototype.config_callbacks = function() {
      var _this = this;

      this.get_new_text_callback = function() {
        return _this.send_text();
      };
      this.force_get_new_text_callback = function() {
        return _this.send_text(true);
      };
      this.one_more_time_get_new_text_callback = function() {
        return _this.send_text(false, true);
      };
      return this.editor.on('change', this.get_new_text_callback);
    };

    TextEditor.prototype.get_text = function() {
      return this.editor.getValue().substr(0, this.max_size);
    };

    TextEditor.prototype.send_text = function(force, one_more_time) {
      var message;

      if (force == null) {
        force = false;
      }
      if (one_more_time == null) {
        one_more_time = false;
      }
      this.new_text = this.get_text();
      if ((force || one_more_time || this.new_text !== this.old_old_text) && this.can_send) {
        console.log('SENDING');
        if (this.one_more_time_update_timeout) {
          window.clearTimeout(this.one_more_time_update_timeout);
        }
        message = {
          'get_text': this.new_text
        };
        if (force) {
          message['force'] = 'true';
        }
        this.old_old_text = this.new_text;
        this.can_send = false;
        this.send_message(message);
        if (!(one_more_time || force)) {
          return this.one_more_time_update_timeout = window.setTimeout(this.one_more_time_get_new_text_callback, 1010);
        }
      }
    };

    TextEditor.prototype.send_message = function(message) {
      return this.room.send_text_editor_message(message);
    };

    TextEditor.prototype.message_received = function(message) {
      if (message['new_text'] !== void 0) {
        if (message['history'] === 'true') {
          this.editor.setValue(message['new_text']);
        } else {
          this.set_text(message['new_text']);
        }
      }
      if (message['run_update']) {
        if (message['user_id'] !== this.room.user_id) {
          return this.send_text(true);
        }
      }
    };

    TextEditor.prototype.set_text = function(text) {
      this.editor.setCursor(this.editor.getCursor());
      this.editor.replaceSelection('`|~');
      this.old_text = this.get_text();
      this.merge_texts(text);
      this.editor.setValue(this.new_text);
      this.return_cursor();
      this.old_old_text = this.get_text();
      return this.can_send = true;
    };

    TextEditor.prototype.merge_texts = function(text) {
      var diff, patch_list;

      diff = this.dmp.diff_main(this.old_old_text, text, true);
      patch_list = this.dmp.patch_make(this.old_old_text, text, diff);
      return this.new_text = this.dmp.patch_apply(patch_list, this.old_text)[0];
    };

    TextEditor.prototype.return_cursor = function() {
      var c, from, to;

      c = this.editor.getSearchCursor('`|~');
      if (c.findNext()) {
        from = c.from();
        to = c.to();
        c.replace('');
        return this.editor.setCursor(from);
      }
    };

    return TextEditor;

  })();

}).call(this);
